use std::io;
use std::fs::File;
use std::path::Path;

static MAX_RRN: u32 = 97;
static HEADER_SIZE_TYPE1: u32 = 182;

struct FileHeader {
    status: u8,
    rrn: i32,
    offset: i64,
    prox_rrn: i32,
    prox_offset: i64,
    nro_reg_rem: i32
}

struct Vehicle {
    removido: u8,
    tamanho_registro: i32, //used only by type2
    rrn: i32,
    offset: i64,
    id: i32,
    ano: i32,
    tam_cidade: i32,
    codC5: i8,
    cidade: String,
    qtt: i32,
    sigla: String,
    tam_marca: i32,
    codC6: i8,
    marca: String,
    tam_modelo: i32,
    codC7: i8,
    modelo: String
}

fn initialize_vehicle() -> Vehicle {
    Vehicle {
        removido: 0,
        tamanho_registro: -1,
        rrn: -1,
        offset: -1,
        id: -1,
        ano: -1,
        qtt: -1,
        sigla: "".to_string(),
        tam_cidade: 0,
        codC5: -1,
        cidade: "".to_string(),
        tam_marca: 0,
        codC6: -1,
        marca: "".to_string(),
        tam_modelo: 0,
        codC7: -1,
        modelo: "".to_string(),
    }
}

fn print_vehicle_full(V: Vehicle, f_type: u8) {

    println!("Removido: {}", V.removido);
    println!("tamanho_registro: {}", V.tamanho_registro);
    println!("prox_rrn: {}", V.rrn);
    println!("prox_offset: {}", V.offset);
    println!("ID: {}", V.id);
    println!("Ano de fabricação: {}", V.ano);
    println!("Quantidade de carros: {}", V.qtt);
    println!("Estado: {}", V.sigla);
    println!("tam_cidade: {}", V.tam_cidade);
    println!("Cod5: {}", V.codC5);
    println!("Cidade: {}", V.cidade);
    println!("tam_marca: {}", V.tam_marca);
    println!("Cod6: {}", V.codC6);
    println!("Marca: {}", V.marca);
    println!("tam_modelo: {}", V.tam_modelo);
    println!("Cod7: {}", V.codC7);
    println!("Modelo: {}", V.modelo);

}

fn read_header_from_bin(file: &File, f_type: u8)
                -> Result<Box<FileHeader>, io::Error> {
    
    let f_header = Box::new(FileHeader {
                                        status: 0,
                                        rrn: -1,
                                        offset: -1,
                                        prox_rrn: 0,
                                        prox_offset: 0,
                                        nro_reg_rem: 0
                                    });

    Ok(f_header)
}

fn read_reg_from_bin_type1(file_bin_r: &File, V: &Vehicle, rrn: i32) -> Result<(), io::Error> {

    let mut cur_pos = file_bin_r.seek(io::SeekFrom::Start(MAX_RRN*rrn + HEADER_SIZE_TYPE1))?;
    let mut reader = io::BufReader::new(cur_pos);

    


}

fn read_all_reg_from_bin(filename_in_bin: &Path, f_type: u8) -> Result<(), io::Error> {
    
    let file_bin_r = File::open(filename_in_bin)?;

    let mut V = initialize_vehicle();

    if f_type == 1{
        
        let mut rrn = 0;
        read_reg_from_bin_type1(file_bin_r, &V, rrn); 

        /*
        while (read_reg_from_bin_type1(file_bin_r, &V, rrn) != false){

        }
        */

    }

    Ok(())

}
